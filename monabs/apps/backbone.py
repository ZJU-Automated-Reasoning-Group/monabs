"""Backbone for SMT"""

from typing import List
import z3


def compute_backbone(formula: z3.ExprRef) -> List[z3.ExprRef]:
    """
    Computes the backbone literals of the given formula.
    A backbone literal is a literal that is true in all models of the formula.
    FIXME: generated by LLM...
    """
    solver = z3.Solver()
    solver.add(formula)
    backbone = []

    if solver.check() == z3.sat:
        model = solver.model()

        # Collect literals from the model
        literals = []
        for d in model:
            if z3.is_bool(model[d]):
                literals.append(d if model[d] else z3.Not(d))

        for lit in literals:
            solver.push()
            solver.add(z3.Not(lit))  # Check if the negation is satisfiable
            if solver.check() == z3.unsat:
                backbone.append(lit)
            solver.pop()

    return backbone

# Example usage:
# x, y = z3.Bools('x y')
# formula = z3.And(x, z3.Or(x, y))
# print(compute_backbone(formula))  # Output: [x]
